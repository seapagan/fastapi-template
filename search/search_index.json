{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to FastAPI-Template","text":"<p>ALPHA Status!</p> <p>This documentation is currently Alpha status and I have much still to add.</p>"},{"location":"#features","title":"Features","text":"<p>This template is a ready-to-use boilerplate for a FastAPI project. It has the following advantages to starting your own from scratch :</p> <ul> <li>Baked-in User database and management. Routes are provided to add/edit/delete   or ban (and unban) Users.</li> <li>Postgresql Integration, using SQLAlchemy ORM, no need for raw SQL queries   (unless you want to!). All database usage is Asynchronous.   Alembic is used to control database   migrations.</li> <li>Register and Login routes provided, both of which return a JWT token to be   used in all future requests. JWT Token expires 120 minutes after issue.</li> <li>JWT-based security as a Bearer Token to control access to all your routes.</li> <li>A <code>Refresh Token</code> with 30 day expiry is sent at time of register or login   (never again). This will enable easy re-authentication when the JWT expires   without needing to send username or password again, and should be done   automatically by the Front-End.</li> <li>A clean layout to help structure your project.</li> <li>A command-line admin tool. This allows to configure the project metadata   very easily, add users (and make admin), and run a development server. This   can easily be modified to add your own functionality (for example bulk add   data) since it is based on the excellent   asyncclick library.</li> <li>Database and Secrets are automatically read from Environment variables or a   <code>.env</code> file if that is provided.</li> <li>User email is validated for correct format on creation (however no checks are   performed to ensure the email or domain actually exists).</li> <li>Control permitted CORS Origin through Environment variables.</li> <li>Manager class set up to send emails to users, and by default an email is sent   when new users register. The content is set by a template (currently a   basic placeholder). This email has a link for the user to confirm their email   address - until this is done, the user cannot user the API.</li> </ul> <p>The template Requires Python 3.8.1+</p> <p>This template is free to use but I would request some accreditation. If you do use it in one of your applications, please put a small note in your readme stating that you based your project on this Template, with a link back to this repository. Thank You \ud83d\ude0a</p> <p>For those who let me know they are using this Template, I'll add links back to your project in this documentation.</p> <p>If this template saves you time/effort/money, or you just wish to show your appreciation for my work, why not Buy me a Coffee! \ud83d\ude03</p>"},{"location":"#funding-link","title":"Funding Link","text":"<p>The template does include a <code>.github/FUNDING.yml</code> file which contains a link to my Buy Me A Coffee page. You can edit or delete this as you will or replace with your own details. If you really appreciate the Template, feel free to leave my details there in addition to your own, though this is entirely optional \ud83d\ude0a</p> <p>The funding file allows your GitHub visitors to sponsor or tip you as a thanks for your work.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Please do feel free to open an Issue for any bugs or issues you find, or even a Pull Request with solutions \ud83d\ude0e</p> <p>Likewise, I am very open to new feature Pull Requests!</p>"},{"location":"contributing/#install-git-pre-commit-hooks","title":"Install Git Pre-Commit hooks","text":"<p>Please do this if you are intending to submit a PR. It will check commits locally before they are pushed up to the Repo.</p> <pre><code>$ pre-commit install\npre-commit installed at .git/hooks/pre-commit\n</code></pre> <p>This will ensure that all code meets the required linting standard before being committed.</p>"},{"location":"contributing/#run-pre-commit-manually","title":"Run pre-commit manually","text":"<p>You can run these checks manually on all files using the below command :</p> <pre><code>poe pre\n</code></pre>"},{"location":"contributing/#contribute-your-work","title":"Contribute your work","text":"<ol> <li>Fork it</li> <li>Create your feature branch (<code>git checkout -b my-new-feature</code>)</li> <li>Commit your changes (<code>git commit -am 'Add some feature'</code>)</li> <li>Push to the branch (<code>git push origin my-new-feature</code>)</li> <li>Create a new Pull Request</li> </ol>"},{"location":"future/","title":"TODO List","text":""},{"location":"future/#add-testing","title":"Add Testing","text":"<ul> <li>Both Unit and Integration testing need to be added to this Repo. The integration testing is under way for a derivative project of this and will be back-ported when it is in a suitable state.</li> </ul>"},{"location":"future/#general","title":"General","text":"<ul> <li>add time-limited bans (configurable)</li> <li>Add certain users that will not time-expire (or much longer time) for eg for   owner or premium access.</li> <li>Replace the <code>toml</code>/<code>toml_w</code> libraries with <code>tomlkit</code> for better functionality.</li> <li>Add a <code>logout</code> route to immediately invalidate the users token and refresh   token. This will need a database to be kept of invalidated tokens (which can   periodically be auto-purged of tokens that would be time-expired anyway.)</li> <li>Allow to resend a registration email</li> <li>Send an email to the User when they change their password or update their   profile, are Banned/Unbanned and to Admins when important events happen.</li> <li>Update current and future email templates with actual content, and change   their markup to latest best practices.</li> <li>Add an option to the command line to bump the version number in API docs and   the TOML file (can be done using the <code>poetry version</code> command already,   document this).</li> <li>add verified status to user list for admins only.</li> <li>allow CLI to verify unverified users.</li> <li>implement rate-limiting - auto block abusers - would help if <code>quotas</code>   implemented first (see below).</li> </ul>"},{"location":"future/#auth","title":"Auth","text":"<ul> <li>add a password recovery endpoint</li> </ul>"},{"location":"future/#cli","title":"CLI","text":"<ul> <li>option to remove the customization functionality from the CLI. Useful once you   have customized the template and don't want to give the end-user the ability to   change it easily.</li> </ul>"},{"location":"future/#documentation","title":"Documentation","text":"<ul> <li>Add proper documentation with examples showing how to use the User &amp; Auth   system in custom code, link to example projects and perhaps create a YouTube   video showing an example custom project based on this template?</li> <li>fix relative links to local files in the markdown</li> <li>add commands to CLI to serve, build, publish to gh-pages etc</li> </ul>"},{"location":"future/#quotas","title":"Quotas","text":"<p>Add Quota functionality.</p> <ul> <li>limit number of API calls per user per day/hour</li> <li>different user groups have different quotas (configurable)</li> <li>allow endpoint with no Quota</li> <li>option to block altogether or seriously slow users access to the API for a   period of time</li> </ul>"},{"location":"future/#frontend","title":"Frontend","text":"<p>Add integration for a proper Frontend (ie React, Vue, etc) by having a config value to point the the location of this instead of using the default <code>templates/index.html</code>. Look at how to integrate API configuration values with this front end.</p>"},{"location":"how-to-guides/","title":"How-to Guides","text":"<p>How-to Guides</p> <p>To be Written</p>"},{"location":"known-issues/","title":"Bugs","text":"<p>1) if user is deleted while logged in gives 500 (Internal Server Error).</p>"},{"location":"project-organization/","title":"Project Organization","text":"<p>This project has been deliberately laid out in a specific way. To avoid long complicated files which are difficult to debug, functionality is separated out in files and modules depending on the specific functionality.</p> <p>main.py - The main controlling file, this should be as clean and short as possible with all functionality moved out to modules.</p> <p>database/ - This module controls database setup and configuration, and should generally not need to be touched.</p> <p>config/ - Handles the API settings and defaults, also the Metadata customization. If you add more settings (for example in the <code>.env</code> file) you should also add them to the <code>config/settings.py</code> or <code>config/metadata.py</code> with suitable defaults. Non-secret (or depoloyment independent) settings should go in the <code>metadata</code> file, while secrets (or deployment specific) should go in the <code>settings</code> and <code>.env</code> files</p> <p>commands/ - This directory can hold any CLI commands you need to write, for example populating a database, create a superuser or other housekeeping tasks.</p> <p>managers/ - This directory contains individual files for each 'group' of functionality. They contain a Class that should take care of the actual work needed for the routes. Check out the <code>managers/auth.py</code> and <code>managers/user.py</code></p> <p>migrations/ - We use Alembic to handle the database migrations. Check out their pages for more info. See instructions under Development for more info.</p> <p>models/ - Any database models used should be defined here along with supporting files (eq the <code>models/enums.py</code>) used here. Models are specified using the SQLAlchemy format, see <code>models/user.py</code> for an example.</p> <p>resources/ - Contains the actual Route resources used by your API. Basically, each grouped set of routes should have its own file, which then should be imported into the <code>resources/routes.py</code> file. That file is automatically imported into the main application, so there are no more changes needed. Check out the routes in <code>resources/user.py</code> for a good example. Note that the routes contain minimal actual logic, instead they call the required functionality from the Manager (UserManager in <code>managers/user.py</code> in this case).</p> <p>schemas/ - Contains all <code>request</code> and <code>response</code> schemas used in the application, as usual with a separate file for each group. The Schemas are defined as Pydantic Classes.</p> <p>static/ - Any static files used by HTML templates for example CSS or JS files.</p> <p>templates/ - Any HTML templates. We have one by default - used only when the root of the API is accessed using a Web Browser (otherwise a simple informational JSON response is returned). You can edit the template in <code>templates/index.html</code> for your own API.</p>"},{"location":"tutorials/","title":"Tutorials","text":"<p>Tutorials</p> <p>To be Written</p>"},{"location":"customization/meta/","title":"Metadata","text":""},{"location":"customization/meta/#customize-the-metadata","title":"Customize the Metadata","text":"<p>By default the Template Title, Description, Author and similar is set to my details. Changing this is very easy though, and there are 2 ways you can do.</p>"},{"location":"customization/meta/#manually","title":"Manually","text":"<p>Metadata is stored in the <code>config/metadata.py</code> file and this can be edited by hand if desired:</p> <pre><code>from config.helpers import MetadataBase\n\ncustom_metadata = MetadataBase(\n    title=\"API Template\",\n    description=\"Run 'api-admin custom metadata' to change this information.\",\n    repository=\"https://github.com/seapagan/fastapi-template\",\n    license_info={\n        \"name\": \"MIT\",\n        \"url\": \"https://opensource.org/licenses/MIT\",\n    },\n    contact={\n        \"name\": \"Grant Ramsay (seapagan)\",\n        \"url\": \"https://www.gnramsay.com\",\n    },\n    email=\"seapagan@gmail.com\",\n    year=\"2023\"\n)\n</code></pre> <p>You can change the values in this dictionary as needed. You should also change the name, description and authors in the <code>pyproject.toml</code> file.</p> <p>For the License URL, you can find a list in the <code>config/helpers.py</code></p>"},{"location":"customization/meta/#using-the-provided-configuration-tool","title":"Using the provided configuration tool","text":"<p>The <code>api-admin</code> command can also do this for you, asking for the values at the command line and automatically updating both files:</p> <pre><code>$ ./api-admin custom metadata\n\nAPI-Template : Customize application Metadata\n\nEnter your API title [API Template]:\nEnter the description [Run 'api-admin custom metadata' to change this information.]:\nVersion Number (use * to reset to '0.0.1') [1.3.1]:\nURL to your Repository [https://github.com/seapagan/fastapi-template]:\n\nChoose a license from the following options:\nApache2, BSD3, BSD2, GPL, LGPL, MIT, MPL2, CDDL, EPL\nYour Choice of License? [MIT]:\n\nAuthor name or handle [Grant Ramsay (seapagan)]:\nContact Email address [seapagan@gmail.com]:\nAuthor Website [https://www.gnramsay.com]:\n\nYou have entered the following data:\nTitle       : API Template\nDescription : Run 'api-admin custom metadata' to change this information.\nVersion     : 1.3.1\nRepository  : https://github.com/seapagan/fastapi-template\nLicense     : MIT\nAuthor      : Grant Ramsay (seapagan)\nEmail       : seapagan@gmail.com\nWebsite     : https://www.gnramsay.com\n(C) Year    : 2023\n\nIs this Correct? [Y/n]: y\n\n-&gt; Writing out Metadata .... Done!\n</code></pre> <p>This will also put in the correct License URL link automatically.</p>"},{"location":"customization/templates/","title":"Templates","text":""},{"location":"customization/templates/#customize-the-templates","title":"Customize the Templates","text":"<p>There are several HTML templates used at this time, all are stored in the <code>templates/</code> folder or a subfolder of this.</p> <ul> <li><code>templates/index.html</code> - This template is shown when the root of the API is visited using a web browser instead of an API call. Use it to display vasic details about your API and usage instructions, point to the documentation etc. The default output is below for an example:</li> </ul> <p></p> <ul> <li><code>templates/email</code> - this folder contains HTML Email templates, currently only basic placeholders.</li> <li><code>welcome.html</code>. This is sent to a new User when they sign up</li> </ul>"},{"location":"deployment/deployment/","title":"Deployment","text":""},{"location":"deployment/deployment/#deploying-to-production","title":"Deploying to Production","text":"<p>There are quite a few ways to deploy a FastAPI app to production. There is a very good discussion about this on the FastAPI Deployment Guide which covers using Uvicorn, Gunicorn and Containers.</p> <ul> <li>My Personal preference is to serve with Gunicorn, using uvicorn workers behind an Nginx proxy, though this does require you having your own server. There is a pretty decent tutorial on this at Vultr.</li> <li>For deploying to AWS Lambda with API Gateway, there is a really excellent Medium post (and it's followup) Here,</li> <li>For AWS Elastic Beanstalk there is a very comprehensive tutorial at testdriven.io</li> </ul> <p>Remember:  you still need to set up a virtual environment, install all the dependencies, setup your <code>.env</code> file (or use Environment variables if your hosting provider uses these - for example Vercel or Heroku) and set up and migrate your Database, exactly the same as for Develpment as desctribed above.</p>"},{"location":"reference/api/","title":"API Reference","text":"<p>API Reference</p> <p>To be Written</p>"},{"location":"reference/swagger/","title":"Interactive API Docs","text":"<p>The interative API below is auto-generated from the OpenAPI specification for this API.</p> <p>Note</p> <p>There is not a real API or Database backing this, so the 'Try It Out' option is disabled. You can access a working version of this by installing the template and running the FastAPI server, then visiting the <code>/docs</code> path.</p> <p>"},{"location":"usage/add-user/","title":"Add a user to the database","text":"<p>It is possible to add Users to the database using the API itself, but you cannot create an Admin user this way, unless you already have an existing Admin user in the database.</p> <p>This template includes a command-line utility to create a new user and optionally make them Admin at the same time:</p> <pre><code>./api-admin user create\n</code></pre> <p>You will be asked for the new user's email etc, and if this should be an Admin user (default is to be a standard non-admin User). These values can be added from the command line too, for automated use. See the built in help for details :</p> <pre><code>$ ./api-admin user create --help\nUsage: api-admin user create [OPTIONS]\n\n  Create a new user.\n\n  Values are either taken from the command line options, or interactively for\n  any that are missing.\n\nOptions:\n  --email       -e      TEXT  The user's email address [required]\n  --first_name  -f      TEXT  The user's first name [required]\n  --last_name   -l      TEXT  The user's last name [required]\n  --password    -p      TEXT  The user's password [required]\n  --admin       -a            Make this user an Admin\n  --help                 Show this message and exit.\n</code></pre> <p>Note that any user added manually this way will automatically be verified (no need for the confirmation email which will not be sent anyway.)</p>"},{"location":"usage/dev-server/","title":"Run a development Server","text":"<p>The uvicorn ASGI server is automatically installed when you install the project dependencies. This can be used for testing the API during development. There is a built-in command to run this easily :</p> <pre><code>api-admin serve\n</code></pre> <p>This will by default run the server on http://localhost:8000, and reload after any change to the source code. You can add options to change this</p> <pre><code>$ ./api-admin serve --help\n\nUsage: api-admin serve [OPTIONS]\n\n  Run a development server from the command line.\n\n  This will auto-refresh on any changes to the source in real-time.\n\nOptions:\n  --port   -p   INTEGER   Define the port to run the server on  [default: 8000]\n  --host   -h   TEXT      Define the interface to run the server on.  [default:\n                          localhost]\n  --reload --no-reload    Enable auto-reload on code changes [default: True]\n  --help                  Show this message and exit.\n</code></pre> <p>If you need more control, you can run <code>uvicorn</code> directly :</p> <pre><code>uvicorn main:app --reload\n</code></pre> <p>The above command starts the server running on http://localhost:8000, and it will automatically reload when it detects any changes as you develop.</p> <p>Note: Neither of these are suitable to host a project in production, see the next section for information.</p>"},{"location":"usage/installation/","title":"How to install this project","text":"<p>Click the 'Use this template' button at the top of the Repository on GitHub. This will create a new repository in your personal GitHub account (Not a Fork) which you can then Clone and start working on.</p> <p>It is assumed that you have at least some knowledge of FastAPI to use this template, there are very good Basic and Advanced User Guides on the FastAPI website .</p>"},{"location":"usage/configuration/database/","title":"Setup the application database","text":""},{"location":"usage/configuration/database/#migrate-the-database","title":"Migrate the Database","text":"<p>Make sure you have configured the database. Then run the following command to set it up, applying all the required migrations:</p> <pre><code>$ ./api-admin db init\n</code></pre> <p>(this is the same as running <code>alembic upgrade head</code>, though it will downgrade to the base structure and delete all data as well)</p> <p>Everytime you add or edit a model, create a new migration as shown below. You will be asked for a commit message. This will create and apply the migration in the same step:</p> <pre><code>$ ./api-admin db revision\nEnter the commit message for the revision: Added email to the users model\n\n  Generating ..._added_email_to_the_users_model.py ...  done\n</code></pre> <p>This is the same as running the below commands, it is provided for ease of use:</p> <pre><code>alembic revision --autogenerate -m \"Commit message\"\nalembic upgrade head\n</code></pre> <p>Check out the Alembic repository for more information on how to use (for example how to revert migrations).</p> <p>Look at the built-in help for more details :</p> <pre><code>$ ./api-admin db --help\nUsage: api-admin db [OPTIONS] COMMAND [ARGS]...\n\n Control the Database.\n\nOptions:\n  --help          Show this message and exit.\n\nCommands:\n  drop            Drop all tables and reset the Database\n  init            Re-Initialise the database using Alembic.\n  revision        Create a new revision.\n  upgrade         Apply the latest Database Migrations.\n</code></pre>"},{"location":"usage/configuration/dot-env/","title":"Environment Variables","text":""},{"location":"usage/configuration/dot-env/#set-up-the-env-file","title":"Set up the <code>.env</code> file","text":"<p>Database (and other) settings can be read from environment variables or from a <code>.env</code> file in the project root. By default, these are only used for the Database setup and JWT Secret Key. See the <code>.env.example</code> file for how to use.</p> <p>Info</p> <p>The Database and User must already exist in your Postgres database!</p> <pre><code># The Base API Url. This is where your API wil be served from, and can be read\n# in the application code. It has no effect on the running of the applciation\n# but is an easy way to build a path for API responses. Defaults to\n# http://localhost:8000\nBASE_URL=http://localhost:8000\n\n# Database Settings These must be changed to match your setup.\nDB_USER=dbuser\nDB_PASSWORD=my_secret_passw0rd\nDB_ADDRESS=localhost\nDB_PORT=5432\nDB_NAME=my_database_name\n\n# TEST Database Settings These must be changed to match your setup. This is only\n# for using Postgresql as a Test database, however that functionality is not yet\n# configurable and SQLite is used by default for testing.\nTEST_DB_USER=dbuser\nTEST_DB_PASSWORD=my_secret_passw0rd\nTEST_DB_ADDRESS=localhost\nTEST_DB_PORT=5432\nTEST_DB_NAME=my_database_name\n\n# generate your own super secret key here, used by the JWT functions.\n# 32 characters or longer, definately change the below!!\nSECRET_KEY=123456\n\n# How many minutes before Bearer tokens expire?\nACCESS_TOKEN_EXPIRE_MINUTES=120\n\n# List of origins that can access this API, separated by a comma, eg:\n# CORS_ORIGINS=http://localhost,https://www.gnramsay.com\n# If you want all origins to access (the default), use * or leave commented:\nCORS_ORIGINS=*\n\n# Email Settings\nMAIL_USERNAME=emailuser\nMAIL_PASSWORD=letmein\nMAIL_FROM=my_api@provider.com\nMAIL_PORT=587\nMAIL_SERVER=smtp.mailserver.com\nMAIL_FROM_NAME=\"FastAPI Template\"\n\n# Common Mail Settings, demending on your mail provider.\n# The below values work fine for GMail\nMAIL_STARTTLS=True\nMAIL_SSL_TLS=False\nMAIL_USE_CREDENTIALS=True\nMAIL_VALIDATE_CERTS=True\n</code></pre> <p>For a PUBLIC API (unless its going through an API gateway!), set <code>CORS_ORIGINS=*</code>, otherwise list the domains (and ports) required. If you use an API gateway of some nature, that will probably need to be listed.</p> <p>To generate a good secret key you can use the below command on Linux or Mac:</p> <pre><code>$ openssl rand -base64 32\nxtFhsNhbGOJG//TAtDNtoTxV/hVDvssC79ApNm0gs7w=\n</code></pre> <p>If the database is not configured or cannot be reached, the Application will disable all routes, print an error to the console, and return a a 500 status code with a clear JSON message for all routes. This saves the ugly default \"Internal Server Error\" from being displayed.</p>"},{"location":"usage/configuration/setup/","title":"Install Dependencies","text":""},{"location":"usage/configuration/setup/#set-up-a-virtual-environment","title":"Set up a Virtual Environment","text":"<p>It is always a good idea to set up dedicated Virtual Environment when you are developing a Python application. If you use Poetry, this will be done automatically for you when you run <code>poetry install</code>.</p> <p>Otherwise, Pyenv has a virtualenv plugin which is very easy to use.</p> <p>Also, check out this freeCodeCamp tutorial or a similar RealPython one for some great info. If you are going this (oldschool!) way, I'd recommend using Virtualenv instead of the built in <code>venv</code> tool (which is a subset of this).</p>"},{"location":"usage/configuration/setup/#install-required-dependencies","title":"Install required Dependencies","text":"<p>The project has been set up using Poetry to organize and install dependencies. If you have Poetry installed, simply run the following to install all that is needed.</p> <pre><code>poetry install\n</code></pre> <p>If you do not (or cannot) have Poetry installed, I have provided an auto-generated <code>requirements.txt</code> in the project root which you can use as normal:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>I definately recommend using Poetry if you can though, it makes dealing with updates and conflicts very easy.</p> <p>If using poetry you now need to activate the VirtualEnv:</p> <pre><code>poetry shell\n</code></pre>"},{"location":"usage/configuration/setup/#install-git-pre-commit-hooks","title":"Install Git Pre-Commit hooks","text":"<p>This stage is optional but recommended (however it is compulsory if you are submitting a Pull Request).</p> <pre><code>$ pre-commit install\npre-commit installed at .git/hooks/pre-commit\n</code></pre> <p>This will ensure that all code meets the required linting standard before being committed.</p>"},{"location":"usage/configuration/setup/#run-pre-commit-manually","title":"Run pre-commit manually","text":"<p>You can run these checks manually on all files using the below command :</p> <pre><code>poe pre\n</code></pre>"}]}