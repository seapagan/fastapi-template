[tool.poetry]
name = "API Template"
version = "0.5.0-beta0"
description = "Run 'api-admin custom metadata' to change this information."
authors = ["Grant Ramsay (seapagan) <seapagan@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
fastapi = { extras = ["all"], version = "^0.103.0" }
alembic = "^1.12.1"
asyncpg = "^0.29.0"
python-decouple = "^3.8"
psycopg2 = "^2.9.9"
PyJWT = "^2.8.0"
Jinja2 = "^3.1.2"
rich = "^13.6.0"
asyncclick = "^8.1.3.4"
anyio = "^4.0.0"
email-validator = "^2.1.0.post1"
tomli = "^2.0.1"
tomli-w = "^1.0.0"
typer = { extras = ["all"], version = "^0.8.0" }
poetry = "^1.7.0"
sqlalchemy = { extras = ["asyncio"], version = "^2.0.23" }
pydantic = "^2.4.2"
pydantic-settings = "^2.0.3"

[tool.poetry.dependencies.fastapi-mail]
extras = ["httpx"]
version = "^1.4.1"

[tool.poetry.dependencies.uvicorn]
extras = ["standard"]
version = "^0.24.0"

[tool.poetry.dependencies.passlib]
extras = ["bcrypt"]
version = "^1.7.4"

[tool.poetry.group.dev.dependencies]
aiosmtpd = "^1.4.4"
aiosqlite = "^0.19.0"
httpx = "0.23.3"
mypy = "^1.5.1"
openapi-readme = "^0.2.4"
pre-commit = "^3.4.0"
pymarkdownlnt = "^0.9.14"
ruff = "^0.1.5"

# task runner
poethepoet = "^0.24.2"

# testing
faker = "^19.13.0"
mock = "^5.1.0"
pyfakefs = "^5.3.0"
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.0.0"
pytest-mock = "^3.11.1"
pytest-randomly = "^3.15.0"
pytest-reverse = "^1.7.0"
pytest-sugar = "^0.9.7"

# docs
mkdocs = "^1.5.3"
mkdocstrings = { extras = ["python"], version = "^0.23.0" }
mkdocs-git-revision-date-localized-plugin = "^1.2.1"
mkdocs-latest-git-tag-plugin = "^0.1.2"
mkdocs-material = "^9.4.8"
mkdocs-minify-plugin = "^0.7.1"
mkdocs-swagger-ui-tag = "^0.6.6"
pymdown-extensions = "^10.3"
pygments = "^2.16.1"

# additional packages


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poe.tasks]
serve = "uvicorn main:app --reload"
pre = "pre-commit run --all-files"
lint = "pylint **/*.py"
_publish_docs = "mkdocs gh-deploy"
_build_docs = "mkdocs build"
openapi = "./api-admin docs openapi --prefix=docs/reference"
"docs:publish" = ["openapi", "_publish_docs"]
"docs:build" = ["openapi", "_build_docs"]
"docs:serve" = "mkdocs serve -a 0.0.0.0:9000"
try = "tryceratops **/*.py"

[tool.flake8]
max-line-length = 80
exclude = ["__init__.py", ".git", "app/migrations/versions/*", "old_tests/*"]
extend-ignore = ["E203", "W503"]
extend-select = ["TC", "TC1", "TRY"]
docstring-convention = "google"
type-checking-pydantic-enabled = true
classmethod-decorators = ["classmethod", "validator"]

[tool.isort]
profile = "black"

[tool.black]
line-length = 80
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.tox
  | venv
  | \.venv
  | _build
  | build
  | dist
)/
'''

[tool.bandit]
exclude_dirs = ["config/settings.py", "schemas/examples.py"]

[tool.bandit.assert_used]
skips = ['*_test.py', '*/test_*.py']

[tool.pydocstyle]
add-ignore = ["D104"]

[tool.pytest.ini_options]
addopts = [
  "-m",
  "not integration",
  "--cov",
  "--cov-report",
  "term-missing",
  "--cov-report",
  "html",
]
filterwarnings = ["ignore:'crypt' is deprecated:DeprecationWarning"]
mock_use_standalone_module = true
markers = ["unit: Unit tests", "integration: Integration tests"]
testpaths = ["tests"]

[tool.coverage.run]
# source = []
omit = ["*/tests/*"]

[tool.pymarkdown]
plugins.md014.enabled = false
