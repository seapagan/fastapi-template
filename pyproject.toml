[project]
name = "api-template"
version = "0.5.4"
description = "Run 'api-admin custom metadata' to change this information."
authors = [{ name = "Grant Ramsay", email = "seapagan@gmail.com" }]
license = "MIT"
readme = "README.md"
requires-python = ">=3.9"
classifiers = ["Private :: Do Not Upload"]
dependencies = [
  "alembic>=1.14.0",
  "anyio>=4.6.2.post1",
  "asyncclick>=8.1.7.2",
  "asyncpg>=0.30.0",
  "email-validator>=2.2.0",
  "fastapi[standard]>=0.115.4",
  "psycopg2>=2.9.10",
  "pydantic>=2.9.2",
  "pydantic-settings>=2.6.1",
  "pyjwt>=2.9.0",
  "python-decouple>=3.8",
  "rich>=13.9.4",
  "rtoml>=0.11.0",
  "jinja2>=3.1.4",
  "fastapi-mail>=1.4.1",
  "httpx>=0.23.3",
  "uvicorn[standard]>=0.32.0",
  "passlib[bcrypt]>=1.7.4",
  "sqlalchemy[asyncio]>=2.0.36",
  "typer>=0.12.5",
]

[project.scripts]
api-admin = "app.api_admin:app"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.sdist]
packages = ["app"]

[tool.hatch.build.targets.wheel]
packages = ["app"]

[tool.uv]
dev-dependencies = [
  "aiosmtpd>=1.4.6",
  "aiosqlite>=0.20.0",
  "faker>=30.8.2",
  "mock>=5.1.0",
  "mypy>=1.13.0",
  "poethepoet>=0.29.0",
  "pre-commit>=4.0.1",
  "pyfakefs>=5.7.1",
  "pymarkdownlnt>=0.9.24",
  "pytest>=8.3.3",
  "pytest-asyncio == 0.21.2",
  "pytest-clarity>=1.0.1",
  "pytest-cov>=6.0.0",
  "pytest-env>=1.1.5",
  "pytest-mock>=3.14.0",
  "pytest-randomly>=3.16.0",
  "pytest-reverse>=1.8.0",
  "pytest-sugar>=1.0.0",
  "pytest-watcher>=0.4.3",
  "ruff>=0.7.2",
  "mkdoc>=0.1",
  "mkdocs-git-revision-date-localized-plugin>=1.3.0",
  "mkdocs-latest-git-tag-plugin>=0.1.2",
  "mkdocs-material>=9.5.43",
  "mkdocs-minify-plugin>=0.8.0",
  "mkdocs-swagger-ui-tag>=0.6.11",
  "pymdown-extensions>=10.12",
  "pygments>=2.18.0",
  "types-passlib>=1.7.7.20240819",
  "asyncpg-stubs>=0.30.0",
  "github-changelog-md>=0.9.5",
  "mkdocstrings[python]>=0.26.2",
]


[tool.poe.tasks]
# setup PoeThePoet tasks
pre.cmd = "pre-commit run --all-files"
pre.help = "Run pre-commit checks"
mypy.cmd = "mypy . --strict"
mypy.help = "Run mypy checks"
format.help = "Format code with Ruff"
format.cmd = "ruff format ."
ruff.help = "Run Ruff checks"
ruff.cmd = "ruff check --output-format=concise ."
markdown.cmd = "pymarkdown --strict-config scan  -r docs/**/*.md"
markdown.help = "Run markdown checks"

# testing tasks
test.help = "Run all tests using Pytest"
test.cmd = "pytest"
"test:unit".help = "Run only Unit tests using Pytest"
"test:unit".cmd = "pytest -m unit"
"test:integration".help = "Run only Integration tests using Pytest"
"test:integration".cmd = "pytest -m integration"
"test:skipped".cmd = "pytest --quiet --collect-only -m skip --no-cov"
"test:skipped".help = "Show skipped tests without running all tests"

# run all linting checks in sequence. we want to run them all, even if one fails
lint.ignore_fail = "return_non_zero"
lint.sequence = ["format", "ruff", "mypy", "markdown"]
lint.help = "Run all linting checks"

# documentation tasks
"docs:publish".cmd = "mkdocs gh-deploy"
"docs:publish".help = "Publish documentation to GitHub Pages"
"docs:build".cmd = "mkdocs build"
"docs:build".help = "Build documentation locally to './site' folder"
"docs:serve".cmd = "mkdocs serve -w TODO.md -w CHANGELOG.md -w CONTRIBUTING.md -w BUGS.md"
"docs:serve".help = "Serve documentation locally"
"docs:serve:all".cmd = "mkdocs serve -w TODO.md -w CHANGELOG.md -w CONTRIBUTING.md -w BUGS.md -a 0.0.0.0:8000"
"docs:serve:all".help = "Serve documentation locally on all interfaces"

# regenerate the openapi.json file
openapi.cmd = "api-admin docs openapi --prefix=docs/reference"
openapi.help = "Generate an OpenAPI JSON file from this API"

# generate the CHANGELOG.md file
changelog.cmd = "github-changelog-md"
changelog.help = "Generate the CHANGELOG.md file"


# configure assorted tools and linters
[tool.pymarkdown]
plugins.md014.enabled = false
plugins.md046.enabled = false
plugins.md033.allowed_elements = "!--,![CDATA[,!DOCTYPE,swagger-ui"
plugins.md013.enabled = false

[tool.ruff]
line-length = 80
src = ["app"]
extend-exclude = [
  "app/migrations", # auto-generated by alembic so we don't need to check them
]
target-version = "py39" # minimum python version supported

[tool.ruff.format]
indent-style = "space"
quote-style = "double"

[tool.ruff.lint]
select = ["ALL"] # we are being very strict!
ignore = [
  "ANN101",
  "PGH003",
  "FBT002",
  "FBT003",
  "B006",
] # These rules are too strict even for us üòù
extend-ignore = [
  "COM812", # ignored for ruff formatting
  "ISC001", # ignored for ruff formatting
  "T201",   # temporary ignore for now, will remove when migrate to logging
]

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["pydantic.validator", "pydantic.root_validator"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
  "S101",   # we can (and MUST!) use 'assert' in test files.
  "ANN001", # annotations for fixtures are sometimes a pain for test files.
  "ARG001", # sometimes fixtures are not physically used but have side-effects
  "ARG002", # as above
  "TD003",
  "FIX002",
  "RUF012",
]
"app/managers/auth.py" = ["ERA001"]
"app/resources/auth.py" = ["ERA001"]


[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
  "fastapi.Depends",
  "fastapi.params.Depends",
  "fastapi.Query",
  "fastapi.params.Query",
]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id"]

[tool.ruff.lint.isort]
known-first-party = ["app"]

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.mypy]
python_version = "3.9"
exclude = ["app/migrations/"]

[[tool.mypy.overrides]]
disable_error_code = ["method-assign", "no-untyped-def", "attr-defined"]
module = "tests.*"

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = "decouple.*"

[tool.pytest.ini_options]
addopts = [
  "-m",
  "not rewrite",  # mark tests 'rewrite' that need work, and they wont be run
  "--cov",
  "--cov-report",
  "term-missing",
  "--cov-report",
  "html",
]
filterwarnings = [
  "ignore:'crypt' is deprecated:DeprecationWarning",
  "ignore:ValidatedEmail.email is deprecated:DeprecationWarning",
]
markers = [
  "unit: Unit tests",
  "integration: Integration tests",
  "rewrite: Tests need Rewriting",
]
testpaths = ["tests"]
mock_use_standalone_module = true
env = ["I_READ_THE_DAMN_DOCS=true"]

[tool.coverage.run]
source = ["app"]
omit = ["*/tests/*"]
concurrency = ["thread", "greenlet"]

[tool.pyright]
venvPath = "."
venv = ".venv"
include = ["app"]
exclude = ["app/migrations"]
reportMissingImports = true
reportMissingTypeStubs = true
pythonVersion = "3.9"
typeCheckingMode = "basic"
