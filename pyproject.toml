[tool.poetry]
name = "API Template"
version = "0.5.0-beta2"
description = "Run 'api-admin custom metadata' to change this information."
authors = ["Grant Ramsay (seapagan) <seapagan@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "app", from = "." }]

classifiers = ["Private :: Do Not Upload"]

[tool.poetry.scripts]
api-admin = "app.api_admin:app"

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
fastapi = { extras = ["all"], version = "^0.103.0" }
alembic = "^1.12.1"
asyncpg = "^0.29.0"
python-decouple = "^3.8"
psycopg2 = "^2.9.9"
PyJWT = "^2.8.0"
Jinja2 = "^3.1.2"
rich = "^13.6.0"
asyncclick = "^8.1.3.4"
anyio = "^4.0.0"
email-validator = "^2.1.0.post1"
tomli = "^2.0.1"
tomli-w = "^1.0.0"
typer = { extras = ["all"], version = "^0.8.0" }
poetry = "^1.7.0"
sqlalchemy = { extras = ["asyncio"], version = "^2.0.23" }
pydantic = "^2.4.2"
pydantic-settings = "^2.0.3"

[tool.poetry.dependencies.fastapi-mail]
extras = ["httpx"]
version = "^1.4.1"

[tool.poetry.dependencies.uvicorn]
extras = ["standard"]
version = "^0.24.0"

[tool.poetry.dependencies.passlib]
extras = ["bcrypt"]
version = "^1.7.4"

[tool.poetry.group.dev.dependencies]
aiosmtpd = "^1.4.4"
aiosqlite = "^0.19.0"
httpx = "0.23.3"
mypy = "^1.5.1"
openapi-readme = "^0.2.4"
pre-commit = "^3.4.0"
pymarkdownlnt = "^0.9.14"
ruff = "^0.1.5"

# task runner
poethepoet = "^0.24.2"

# testing
faker = "^19.13.0"
mock = "^5.1.0"
pyfakefs = "^5.3.0"
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.0.0"
pytest-mock = "^3.11.1"
pytest-randomly = "^3.15.0"
pytest-reverse = "^1.7.0"
pytest-sugar = "^0.9.7"

# docs
mkdocs = "^1.5.3"
mkdocstrings = { extras = ["python"], version = "^0.23.0" }
mkdocs-git-revision-date-localized-plugin = "^1.2.1"
mkdocs-latest-git-tag-plugin = "^0.1.2"
mkdocs-material = "^9.4.8"
mkdocs-minify-plugin = "^0.7.1"
mkdocs-swagger-ui-tag = "^0.6.6"
pymdown-extensions = "^10.3"
pygments = "^2.16.1"

# for typing
types-passlib = "^1.7.7.13"
asyncpg-stubs = "^0.29.1"

# additional packages
pytest-watcher = "^0.3.4"
pyright = "^1.1.335"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poe.tasks]
# setup PoeThePoet tasks
pre.cmd = "pre-commit run --all-files"
pre.help = "Run pre-commit checks"
mypy.cmd = "mypy . --strict"
mypy.help = "Run mypy checks"
format.help = "Format code with Ruff"
format.cmd = "ruff format ."
ruff.help = "Run Ruff checks"
ruff.cmd = "ruff check ."
test.help = "Run tests using Pytest"
test.cmd = "pytest"
markdown.cmd = "pymarkdown --strict-config scan  -r docs/**/*.md"
markdown.help = "Run markdown checks"

# run all linting checks in sequence. we want to run them all, even if one fails
lint.ignore_fail = "return_non_zero"
lint.sequence = ["format", "ruff", "mypy", "markdown"]
lint.help = "Run all linting checks"

# documentation tasks
"docs:publish".cmd = "mkdocs gh-deploy"
"docs:publish".help = "Publish documentation to GitHub Pages"
"docs:build".cmd = "mkdocs build"
"docs:build".help = "Build documentation locally to './site' folder"
"docs:serve".cmd = "mkdocs serve -w TODO.md -w CHANGELOG.md -w CONTRIBUTING.md -w BUGS.md"
"docs:serve".help = "Serve documentation locally"
"docs:serve:all".cmd = "mkdocs serve -w TODO.md -w CHANGELOG.md -w CONTRIBUTING.md -w BUGS.md -a 0.0.0.0:8000"
"docs:serve:all".help = "Serve documentation locally on all interfaces"

# regenerate the openapi.json file
openapi.cmd = "./api-admin docs openapi --prefix=docs/reference"
openapi.help = "Generate an OpenAPI JSON file from this API"

# generate the CHANGELOG.md file
changelog.cmd = "github-changelog-md"
changelog.help = "Generate the CHANGELOG.md file"

# configure assorted tools and linters
[tool.pymarkdown]
plugins.md014.enabled = false
plugins.md046.enabled = false
plugins.md033.allowed_elements = "!--,![CDATA[,!DOCTYPE,swagger-ui"
plugins.md013.enabled = false

[tool.ruff]
line-length = 80
select = ["ALL"] # we are being very strict!
ignore = [
  "ANN101",
  "PGH003",
  "FBT002",
  "FBT003",
  "B006",
] # These rules are too strict even for us 😝
extend-ignore = [
  "COM812", # ignored for ruff formatting
  "ISC001", # ignored for ruff formatting
  "T201",   # temporary ignore for now, will remove when migrate to logging
]

src = ["app"]
extend-exclude = [
  "app/migrations",    # auto-generated by alembic so we don't need to check them
  "tests/integration", # ignore for now until start fixing these
]
target-version = "py39" # minimum python version supported

[tool.ruff.format]
indent-style = "space"
quote-style = "double"

[tool.ruff.pep8-naming]
classmethod-decorators = ["pydantic.validator", "pydantic.root_validator"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.extend-per-file-ignores]
"tests/**/*.py" = [
  "S101",   # we can (and MUST!) use 'assert' in test files.
  "ANN001", # annotations for fixtures are sometimes a pain for test files.
  "ARG001", # sometimes fixtures are not physically used but have side-effects
  "ARG002", # as above
  "TD003",
  "FIX002",
]
"app/managers/auth.py" = ["ERA001"]
"app/resources/auth.py" = ["ERA001"]


[tool.ruff.flake8-bugbear]
extend-immutable-calls = [
  "fastapi.Depends",
  "fastapi.params.Depends",
  "fastapi.Query",
  "fastapi.params.Query",
]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id"]

[tool.ruff.isort]
known-first-party = ["app"]

[tool.ruff.pyupgrade]
keep-runtime-typing = true

[tool.mypy]
python_version = "3.9"
exclude = ["app/migrations/", "tests/integration/"]

[[tool.mypy.overrides]]
disable_error_code = ["method-assign", "no-untyped-def", "attr-defined"]
module = "tests.*"

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = "decouple.*"

[tool.pytest.ini_options]
addopts = [
  "-m",
  "not integration",
  "--cov",
  "--cov-report",
  "term-missing",
  "--cov-report",
  "html",
]
filterwarnings = ["ignore:'crypt' is deprecated:DeprecationWarning"]
markers = ["unit: Unit tests", "integration: Integration tests"]
testpaths = ["tests"]
mock_use_standalone_module = true

[tool.coverage.run]
# source = []
source = ["app"]
omit = ["*/tests/*", "app/commands/*", "app/api_admin.py"]

[tool.pyright]
venvPath = "."
venv = ".venv"
include = ["app"]
exclude = ["app/migrations", "tests/integration"]
reportMissingImports = true
reportMissingTypeStubs = true
pythonVersion = "3.9"
typeCheckingMode = "basic"
