name: Tests

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main", "develop"]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      SKIP_COVERAGE_UPLOAD: false
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fastapi-template-test
        ports:
          - 5432:5432
        options:
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s
          --health-retries 5

    steps:
      # ---------------------------------------------------------------------- #
      #                     checkout repo and setup Python                     #
      # ---------------------------------------------------------------------- #
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      # ---------------------------------------------------------------------- #
      #                      install and configure poetry                      #
      # ---------------------------------------------------------------------- #
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      # ---------------------------------------------------------------------- #
      #                    load cached venv if cache exists                    #
      # ---------------------------------------------------------------------- #
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key:
            venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version
            }}-${{ hashFiles('**/poetry.lock') }}
      # ---------------------------------------------------------------------- #
      #              install dependencies if cache does not exist              #
      # ---------------------------------------------------------------------- #
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      # ---------------------------------------------------------------------- #
      #                               run Pytest                               #
      # ---------------------------------------------------------------------- #
      - name: Test with pytest
        run: |
          poetry run pytest --cov-report=xml
      - name: Run codacy-coverage-reporter
        if: ${{ env.SKIP_COVERAGE_UPLOAD != 'true'}}
        uses: codacy/codacy-coverage-reporter-action@v1
        continue-on-error: true
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ./coverage.xml
