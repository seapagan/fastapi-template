{"openapi": "3.1.0", "info": {"title": "API Template", "description": "Run 'api-admin custom metadata' to change this information.", "version": "0.7.0"}, "paths": {"/users/": {"get": {"tags": ["Users"], "summary": "Get Users", "description": "Get all users or a specific user by their ID.\n\nuser_id is optional, and if omitted then all Users are returned.\n\nThis route is only allowed for Admins.", "operationId": "get_users_users__get", "security": [{"HTTPBearer": []}], "parameters": [{"name": "user_id", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "User Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"anyOf": [{"$ref": "#/components/schemas/UserResponse"}, {"type": "array", "items": {"$ref": "#/components/schemas/UserResponse"}}], "title": "Response Get Users Users  Get"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/users/me": {"get": {"tags": ["Users"], "summary": "Get My User Data", "description": "Get the current user's data only.", "operationId": "get_my_user_data_users_me_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MyUserResponse"}}}}}, "security": [{"HTTPBearer": []}]}}, "/users/{user_id}/make-admin": {"post": {"tags": ["Users"], "summary": "Make Admin", "description": "Make the User with this ID an Admin.", "operationId": "make_admin_users__user_id__make_admin_post", "security": [{"HTTPBearer": []}], "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "integer", "title": "User Id"}}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/users/{user_id}/password": {"post": {"tags": ["Users"], "summary": "Change Password", "description": "Change the password for the specified user.\n\nCan only be done by an Admin, or the specific user that matches the user_id.", "operationId": "change_password_users__user_id__password_post", "security": [{"HTTPBearer": []}], "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "integer", "title": "User Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserChangePasswordRequest"}}}}, "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/users/{user_id}/ban": {"post": {"tags": ["Users"], "summary": "Ban User", "description": "Ban the specific user Id.\n\nAdmins only. The Admin cannot ban their own ID!", "operationId": "ban_user_users__user_id__ban_post", "security": [{"HTTPBearer": []}], "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "integer", "title": "User Id"}}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/users/{user_id}/unban": {"post": {"tags": ["Users"], "summary": "Unban User", "description": "Ban the specific user Id.\n\nAdmins only.", "operationId": "unban_user_users__user_id__unban_post", "security": [{"HTTPBearer": []}], "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "integer", "title": "User Id"}}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/users/{user_id}": {"put": {"tags": ["Users"], "summary": "Edit User", "description": "Update the specified User's data.\n\nAvailable for the specific requesting User, or an Admin.", "operationId": "edit_user_users__user_id__put", "security": [{"HTTPBearer": []}], "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "integer", "title": "User Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserEditRequest"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MyUserResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["Users"], "summary": "Delete User", "description": "Delete the specified User by user_id.\n\nAdmin only.", "operationId": "delete_user_users__user_id__delete", "security": [{"HTTPBearer": []}], "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "integer", "title": "User Id"}}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/users/search": {"get": {"tags": ["Users"], "summary": "Search users", "description": "Search for users with various criteria. Admin only endpoint.", "operationId": "search_users_users_search_get", "security": [{"HTTPBearer": []}], "parameters": [{"name": "search_term", "in": "query", "required": true, "schema": {"type": "string", "title": "Search Term"}}, {"name": "field", "in": "query", "required": false, "schema": {"type": "string", "default": "all", "title": "Field"}}, {"name": "exact_match", "in": "query", "required": false, "schema": {"type": "boolean", "default": false, "title": "Exact Match"}}, {"name": "page", "in": "query", "required": false, "schema": {"type": "integer", "minimum": 1, "description": "Page number", "default": 1, "title": "Page"}, "description": "Page number"}, {"name": "size", "in": "query", "required": false, "schema": {"type": "integer", "maximum": 100, "minimum": 1, "description": "Page size", "default": 50, "title": "Size"}, "description": "Page size"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Page_UserResponse_"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/register/": {"post": {"tags": ["Authentication"], "summary": "Register A New User", "description": "Register a new User and return a JWT token plus a Refresh Token.\n\nThe JWT token should be sent as a Bearer token for each access to a\nprotected route. It will expire after 120 minutes.\n\nWhen the JWT expires, the Refresh Token can be sent using the '/refresh'\nendpoint to return a new JWT Token. The Refresh token will last 30 days, and\ncannot be refreshed.", "operationId": "register_a_new_user_register__post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserRegisterRequest"}}}, "required": true}, "responses": {"201": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TokenResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/login/": {"post": {"tags": ["Authentication"], "summary": "Login An Existing User", "description": "Login an existing User and return a JWT token plus a Refresh Token.\n\nThe JWT token should be sent as a Bearer token for each access to a\nprotected route. It will expire after 120 minutes.\n\nWhen the JWT expires, the Refresh Token can be sent using the '/refresh'\nendpoint to return a new JWT Token. The Refresh token will last 30 days, and\ncannot be refreshed.", "operationId": "login_an_existing_user_login__post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserLoginRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TokenResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/refresh/": {"post": {"tags": ["Authentication"], "summary": "Refresh An Expired Token", "description": "Return a new JWT, given a valid Refresh token.\n\nThe Refresh token will not be updated at this time, it will still expire 30\ndays after original issue. At that time the User will need to login again.", "operationId": "refresh_an_expired_token_refresh__post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TokenRefreshRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TokenRefreshResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/verify/": {"get": {"tags": ["Authentication"], "summary": "Verify", "description": "Verify a new user.\n\nThe code is sent to  new user by email, which must then be validated here.\n\nWe dont need to return anything here, as success or errors will be handled\nby FastAPI exceptions.", "operationId": "verify_verify__get", "parameters": [{"name": "code", "in": "query", "required": false, "schema": {"type": "string", "default": "", "title": "Code"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/users/keys": {"get": {"tags": ["API Keys"], "summary": "List API keys for the authenticated user", "description": "List API keys for the authenticated user.", "operationId": "list_api_keys_users_keys_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/ApiKeyResponse"}, "type": "array", "title": "Response List Api Keys Users Keys Get"}}}}}, "security": [{"HTTPBearer": []}]}, "post": {"tags": ["API Keys"], "summary": "Create a new API key for the authenticated user", "description": "Create a new API key for the authenticated user.", "operationId": "create_api_key_users_keys_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiKeyCreate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiKeyCreateResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBearer": []}]}}, "/users/keys/by-user/{user_id}": {"get": {"tags": ["API Keys"], "summary": "List API keys for a specific user (admin only)", "description": "List API keys for a specific user (admin only).", "operationId": "list_user_api_keys_users_keys_by_user__user_id__get", "security": [{"HTTPBearer": []}], "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "integer", "title": "User Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/ApiKeyResponse"}, "title": "Response List User Api Keys Users Keys By User  User Id  Get"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/users/keys/{key_id}": {"get": {"tags": ["API Keys"], "summary": "Get a specific API key by ID for the authenticated user", "description": "Get a specific API key by ID.", "operationId": "get_api_key_users_keys__key_id__get", "security": [{"HTTPBearer": []}], "parameters": [{"name": "key_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Key Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiKeyResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "patch": {"tags": ["API Keys"], "summary": "Update an API key's name or active status for the current user", "description": "Update an API key's name or active status.", "operationId": "update_api_key_users_keys__key_id__patch", "security": [{"HTTPBearer": []}], "parameters": [{"name": "key_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Key Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiKeyUpdate"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiKeyResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["API Keys"], "summary": "Delete an API key for the authenticated user", "description": "Delete an API key.", "operationId": "delete_api_key_users_keys__key_id__delete", "security": [{"HTTPBearer": []}], "parameters": [{"name": "key_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Key Id"}}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/users/keys/by-user/{user_id}/{key_id}": {"patch": {"tags": ["API Keys"], "summary": "Update another user's API key (admin only)", "description": "Update another user's API key (admin only).", "operationId": "update_user_api_key_users_keys_by_user__user_id___key_id__patch", "security": [{"HTTPBearer": []}], "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "integer", "title": "User Id"}}, {"name": "key_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Key Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiKeyUpdate"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ApiKeyResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["API Keys"], "summary": "Delete another user's API key (admin only)", "description": "Delete another user's API key (admin only).", "operationId": "delete_user_api_key_users_keys_by_user__user_id___key_id__delete", "security": [{"HTTPBearer": []}], "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "integer", "title": "User Id"}}, {"name": "key_id", "in": "path", "required": true, "schema": {"type": "string", "format": "uuid", "title": "Key Id"}}], "responses": {"204": {"description": "Successful Response"}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}}, "components": {"schemas": {"ApiKeyCreate": {"properties": {"name": {"type": "string", "maxLength": 50, "minLength": 1, "title": "Name"}, "scopes": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "title": "Scopes"}}, "type": "object", "required": ["name"], "title": "ApiKeyCreate", "description": "Schema for creating a new API key."}, "ApiKeyCreateResponse": {"properties": {"id": {"type": "string", "format": "uuid", "title": "Id"}, "name": {"type": "string", "title": "Name"}, "created_at": {"type": "string", "format": "date-time", "title": "Created At"}, "is_active": {"type": "boolean", "title": "Is Active"}, "scopes": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "title": "Scopes"}, "key": {"type": "string", "title": "Key"}}, "type": "object", "required": ["id", "name", "created_at", "is_active", "key"], "title": "ApiKeyCreateResponse", "description": "Schema for API key creation response, including the raw key."}, "ApiKeyResponse": {"properties": {"id": {"type": "string", "format": "uuid", "title": "Id"}, "name": {"type": "string", "title": "Name"}, "created_at": {"type": "string", "format": "date-time", "title": "Created At"}, "is_active": {"type": "boolean", "title": "Is Active"}, "scopes": {"anyOf": [{"items": {"type": "string"}, "type": "array"}, {"type": "null"}], "title": "Scopes"}}, "type": "object", "required": ["id", "name", "created_at", "is_active"], "title": "ApiKeyResponse", "description": "Schema for API key response."}, "ApiKeyUpdate": {"properties": {"name": {"anyOf": [{"type": "string", "maxLength": 50, "minLength": 1}, {"type": "null"}], "title": "Name"}, "is_active": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Is Active"}}, "type": "object", "title": "ApiKeyUpdate", "description": "Schema for updating an API key."}, "HTTPValidationError": {"properties": {"detail": {"items": {"$ref": "#/components/schemas/ValidationError"}, "type": "array", "title": "Detail"}}, "type": "object", "title": "HTTPValidationError"}, "MyUserResponse": {"properties": {"email": {"type": "string", "title": "Email", "examples": ["user@example.com"]}, "first_name": {"type": "string", "title": "First Name", "examples": ["John"]}, "last_name": {"type": "string", "title": "Last Name", "examples": ["Doe"]}}, "type": "object", "required": ["email", "first_name", "last_name"], "title": "MyUserResponse", "description": "Response for non-admin getting their own User data."}, "Page_UserResponse_": {"properties": {"items": {"items": {"$ref": "#/components/schemas/UserResponse"}, "type": "array", "title": "Items"}, "total": {"anyOf": [{"type": "integer", "minimum": 0.0}, {"type": "null"}], "title": "Total"}, "page": {"anyOf": [{"type": "integer", "minimum": 1.0}, {"type": "null"}], "title": "Page"}, "size": {"anyOf": [{"type": "integer", "minimum": 1.0}, {"type": "null"}], "title": "Size"}, "pages": {"anyOf": [{"type": "integer", "minimum": 0.0}, {"type": "null"}], "title": "Pages"}}, "type": "object", "required": ["items", "total", "page", "size"], "title": "Page[UserResponse]"}, "RoleType": {"type": "string", "enum": ["user", "admin"], "title": "RoleType", "description": "Contains the different Role types Users can have."}, "TokenRefreshRequest": {"properties": {"refresh": {"type": "string", "title": "Refresh"}}, "type": "object", "required": ["refresh"], "title": "TokenRefreshRequest", "description": "Request schema for refreshing a JWT token."}, "TokenRefreshResponse": {"properties": {"token": {"type": "string", "title": "Token"}}, "type": "object", "required": ["token"], "title": "TokenRefreshResponse", "description": "Return a new JWT only, after a refresh request."}, "TokenResponse": {"properties": {"token": {"type": "string", "title": "Token"}, "refresh": {"type": "string", "title": "Refresh"}}, "type": "object", "required": ["token", "refresh"], "title": "TokenResponse", "description": "Response Schema for Register/Login routes.\n\nThis returns a JWT token and a Refresh token."}, "UserChangePasswordRequest": {"properties": {"password": {"type": "string", "title": "Password", "examples": ["My S3cur3 P@ssw0rd"]}}, "type": "object", "required": ["password"], "title": "UserChangePasswordRequest", "description": "Request Schema for changing a user's password."}, "UserEditRequest": {"properties": {"email": {"type": "string", "title": "Email", "examples": ["user@example.com"]}, "password": {"type": "string", "title": "Password", "examples": ["My S3cur3 P@ssw0rd"]}, "first_name": {"type": "string", "title": "First Name", "examples": ["John"]}, "last_name": {"type": "string", "title": "Last Name", "examples": ["Doe"]}}, "type": "object", "required": ["email", "password", "first_name", "last_name"], "title": "UserEditRequest", "description": "Request schema for Editing a User.\n\nFor now just inherit everything from the UserRegisterRequest"}, "UserLoginRequest": {"properties": {"email": {"type": "string", "title": "Email", "examples": ["user@example.com"]}, "password": {"type": "string", "title": "Password", "examples": ["My S3cur3 P@ssw0rd"]}}, "type": "object", "required": ["email", "password"], "title": "UserLoginRequest", "description": "Request schema for the Login Route."}, "UserRegisterRequest": {"properties": {"email": {"type": "string", "title": "Email", "examples": ["user@example.com"]}, "password": {"type": "string", "title": "Password", "examples": ["My S3cur3 P@ssw0rd"]}, "first_name": {"type": "string", "title": "First Name", "examples": ["John"]}, "last_name": {"type": "string", "title": "Last Name", "examples": ["Doe"]}}, "type": "object", "required": ["email", "password", "first_name", "last_name"], "title": "UserRegisterRequest", "description": "Request schema for the Register Route."}, "UserResponse": {"properties": {"email": {"type": "string", "title": "Email", "examples": ["user@example.com"]}, "id": {"type": "integer", "title": "Id", "default": 25}, "first_name": {"type": "string", "title": "First Name", "examples": ["John"]}, "last_name": {"type": "string", "title": "Last Name", "examples": ["Doe"]}, "role": {"$ref": "#/components/schemas/RoleType", "examples": ["user"]}, "banned": {"type": "boolean", "title": "Banned", "examples": [false]}, "verified": {"type": "boolean", "title": "Verified", "examples": [true]}}, "type": "object", "required": ["email", "first_name", "last_name", "role", "banned", "verified"], "title": "UserResponse", "description": "Response Schema for a User."}, "ValidationError": {"properties": {"loc": {"items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}, "type": "array", "title": "Location"}, "msg": {"type": "string", "title": "Message"}, "type": {"type": "string", "title": "Error Type"}}, "type": "object", "required": ["loc", "msg", "type"], "title": "ValidationError"}}, "securitySchemes": {"HTTPBearer": {"type": "http", "scheme": "bearer"}}}}